(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{242:function(t,e,r){"use strict";r.r(e);var s=r(0),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),r("p",[t._v("Promise.all([p1, p2, p3])用于将多个 promise 实例，包装成一个新的 Promise 实例，返回的实例就是普通的 promise\n它接收一个数组作为参数\n数组里可以是 Promise 对象，也可以是别的值，只有 Promise 会等待状态改变\n当所有的子 Promise 都完成，该 Promise 完成，返回值是全部值得数组\n有任何一个失败，该 Promise 失败，返回值是第一个失败的子 Promise 结果")]),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("常见用法：\n异步操作和定时器放在一起，，如果定时器先触发，就认为超时，告知用户；\n例如我们要从远程的服务家在资源如果 5000ms 还没有加载过来我们就告知用户加载失败")]),t._v(" "),r("p",[t._v("现实中的用法\n回调包装成 Promise，他有两个显而易见的好处：\n1、可读性好\n2、返回 的结果可以加入任何 Promise 队列")]),t._v(" "),r("p",[t._v("作者：王云飞_小四_wyunfei\n链接：https://www.jianshu.com/p/1b63a13c2701\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("作为网页内容的一部分，图像和视频通常要消耗很多资源加载。要提高网页应用的性能，如何避免资源浪费在加载图像和视频上就很重要了。但是，很多时候我们都不愿意减少网页上的媒体资源，所以我们经常无从下手。幸运的是，我们有懒加载这个绝招，它可以帮助我们减少加载时间和降低负载，而不在内容上偷工减料。")]),t._v(" "),t._m(4),t._v(" "),r("p",[t._v("懒加载是一种在页面加载时延迟加载一些非关键资源的技术，换句话说就是按需加载。对于图片来说，非关键通常意味着离屏。如果你有使用过 Lighthouse 并且做过一些性能调优，你可能已经见过一些离屏图片的应用。"),r("a",{attrs:{href:"https://link.jianshu.com?t=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ftools%2Flighthouse%2Faudits%2Foffscreen-images",target:"_blank",rel:"noopener noreferrer"}},[t._v("(offscreen-images)"),r("OutboundLink")],1)]),t._v(" "),t._m(5),t._v(" "),r("p",[t._v("我们之前看到的懒加载一般是这样的形式：")]),t._v(" "),t._m(6),t._v(" "),r("p",[t._v("我们可以在"),r("a",{attrs:{href:"https://link.jianshu.com?t=https%3A%2F%2Fmedium.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Medium"),r("OutboundLink")],1),t._v("中看到懒加载是如何使用的，网页首先用一张轻量级的图片占位，当占位图片被拖动到视窗，瞬间加载目标图片，然后替换占位图片。")]),t._v(" "),t._m(7),t._v(" "),r("p",[t._v("如果你不是很熟悉懒加载技术，你或许会疑问它有什么用，能为我们带来什么好处，下面我们将会探讨这个问题。")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),r("p",[t._v("懒加载图片和视频，可以减少页面加载的时间、页面的大小和降低系统资源的占用，这些对于性能都有显著地提升。在这里，我们将会提到一些懒加载技术和使用方法，还有一些常用的"),r("a",{attrs:{href:"https://link.jianshu.com?t=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ffundamentals%2Fperformance%2Flazy-loading-guidance%2Fimages-and-video%2F%23lazy_loading_libraries",target:"_blank",rel:"noopener noreferrer"}},[t._v("懒加载库"),r("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(10),t._v(" "),r("p",[t._v("图片懒加载在技术上实现很简单，不过对于细节要求比较严格。目前有很多实现懒加载的方法，先从懒加载内联图片说起吧。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),r("p",[t._v("如果你之前用过懒加载，你很可能是通过监听一些事件比如"),r("code",[t._v("scroll")]),t._v("或者"),r("code",[t._v("resize")]),t._v("来检测元素出现在视窗，这种方法很成熟，能够兼容大部分的浏览器。但是，现代浏览器提供了一个更好的方法给我们("),r("a",{attrs:{href:"https://link.jianshu.com?t=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Fupdates%2F2016%2F04%2Fintersectionobserver",target:"_blank",rel:"noopener noreferrer"}},[t._v("the intersection observer API"),r("OutboundLink")],1),t._v(")")]),t._v(" "),t._m(14),t._v(" "),r("p",[t._v("作者：Naeco\n链接：https://www.jianshu.com/p/e86c61468285\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),t._v(" "),t._m(15),t._v(" "),r("p",[t._v("String，Number，Boolean，Null，undefined")]),t._v(" "),r("p",[t._v("console.log(typeof(null));//object")]),t._v(" "),r("p",[t._v("console.log(typeof(NaN));//number")]),t._v(" "),r("p",[t._v("console.log(typeof(undefined));//undefined")]),t._v(" "),t._m(16),t._v(" "),r("p",[t._v("当需要在数据变化时执行异步或开销较大的操作时，watch 这个方式是最有用的。")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),r("p",[t._v("1.命名路由搭配 params，刷新页面参数会丢失 2.查询参数搭配 query，刷新页面数据不会丢失 3.接受参数使用 this.$router 后面就是搭配路由的名称就能获取到参数的值")]),t._v(" "),t._m(19),t._v(" "),r("p",[t._v("遇到一个页面刷新的问题，记录一下")]),t._v(" "),r("p",[t._v("1、this.$router.go(0)")]),t._v(" "),r("p",[t._v("这种方法页面会一瞬间的白屏，体验不是很好，虽然只是一行代码的事")]),t._v(" "),r("p",[t._v("2、location.reload()")]),t._v(" "),r("p",[t._v("这种也是一样，画面一闪，效果总不是很好")]),t._v(" "),r("p",[t._v("3、跳转空白页再跳回原页面")]),t._v(" "),r("p",[t._v("在需要页面刷新的地方写上：this.$router.push('/emptyPage')，跳转到一个空白页。在 emptyPage.vue 里 beforeRouteEnter 钩子里控制页面跳转，从而达到刷新的效果")]),t._v(" "),r("p",[t._v("beforeRouteEnter (to, from, next) {\nnext(vm => {\nvm.$router.replace(from.path)\n})\n}。")]),t._v(" "),r("p",[t._v("这种画面虽不会一闪，但是能看见路由快速变化。")]),t._v(" "),r("p",[t._v("4、控制"),r("router-view",[t._v("的显示隐藏")])],1),t._v(" "),r("p",[t._v("默认"),t.isRouterAlive?r("router-view"):t._e(),t._v("isRouterAlive 肯定是 true，在需要刷新的时候把这个值设为 false，接着再重新设为 true：")],1),t._v(" "),t._m(20),t._v(" "),r("p",[t._v("对于 vue 这类渐进式前端开发框架，为了构建 SPA（单页面应用），需要引入前端路由系统，这也就是 Vue-Router 存在的意义。前端路由的核心，就在于 —— 改变视图的同时不会向后端发出请求。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),r("p",[t._v("一般场景下，hash 和 history 都可以，除非你更在意颜值，# 符号夹杂在 URL 里看起来确实有些不太美丽。")]),t._v(" "),r("p",[t._v("如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。")]),t._v(" "),r("p",[t._v("另外，根据 Mozilla Develop Network 的介绍，调用 history.pushState() 相比于直接修改 hash，存在以下优势:")]),t._v(" "),t._m(24),t._v(" "),r("p",[t._v("当然啦，history 也不是样样都好。SPA 虽然在浏览器里游刃有余，但真要通过 URL 向后端发起 HTTP 请求时，两者的差异就来了。尤其在用户手动输入 URL 后回车，或者刷新（重启）浏览器的时候。")]),t._v(" "),r("p",[t._v("个人在接入微信的一个活动开发过程中 开始使用的 hash 模式，但是后面后端无法获取到我#后面的 url 参数，于是就把参数写在#前面，但是讨论后还是决定去掉这个巨丑的#")]),t._v(" "),r("p",[t._v("于是乎改用 history 模式，但是开始跑流程的时候是没问题，但是后来发现跳转后刷新或者回跳，会报一个 404 的错误，找不到指定的路由,最后后端去指向正确的路由 加了/hd/xxx 去匹配是否有这个/hd/{:path} 才得以解决")]),t._v(" "),t._m(25),t._v(" "),r("p",[t._v("1 hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 http://www.abc.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回 404 错误。")]),t._v(" "),r("p",[t._v("2 history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，如 http://www.abc.com/book/id。如果后端缺少对 /book/id 的路由处理，将返回 404 错误。Vue-Router 官网里如此描述：“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”")]),t._v(" "),r("p",[t._v("3 结合自身例子，对于一般的 Vue + Vue-Router + Webpack + XXX 形式的 Web 开发场景，用 history 模式即可，只需在后端（Apache 或 Nginx）进行简单的路由配置，同时搭配前端路由的 404 页面支持。")]),t._v(" "),r("p",[t._v("以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持脚本之家。")]),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._m(29),t._v(" "),t._m(30),r("p",[t._v("最近在使用 fetch 的时候，也遇到了不少的问题：\nfetch 是一个低层次的 API，你可以把它考虑成原生的 XHR，所以使用起来并不是那么舒服，需要进行封装。\n例如：")]),t._v(" "),t._m(31),t._m(32),t._v(" "),r("p",[t._v("作者：赵客缦胡缨 v 吴钩霜雪明\n链接：https://www.jianshu.com/p/8bc48f8fde75\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),r("p",[t._v("https://www.haorooms.com/post/js_bb")]),t._v(" "),r("p",[t._v("当一个函数 A 的作用域被内部的 B 函数引用时，A 函数的作用域就会被 B 函数闭包，如果函数 A 返回了函数 B，当 A 函数执行完毕时，A 函数的作用域也不会释放。")]),t._v(" "),r("p",[t._v("优点：")]),t._v(" "),r("p",[t._v("闭包可以实现对象的私有属性和私有方法。")]),t._v(" "),r("p",[t._v("闭包可以封装变量，从简减少对全局作用域的污染。")]),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),r("p",[t._v("https://blog.csdn.net/xiaoermingn/article/details/80745117")]),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),r("p",[t._v("刚学习 react 的同学最头疼的是数据流向了,那么怎么更清楚的理解 redux 官方文档给出的数据流向图呢????? 我们先完整介绍流程")]),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),r("p",[t._v("额~~~,是不是有些小伙伴还是不太懂,那我们举个栗子吧")]),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),r("p",[t._v("作者：前端拓路者\n链接：https://www.jianshu.com/p/a5859193b646\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),t._v(" "),t._m(57),t._v(" "),r("p",[t._v("**定义：**一个函数的返回结果只依赖于它的参数，并且在执行的过程中没有副作用，我们就把该函数称作纯函数。")]),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),r("p",[t._v("作者：小进进不将就\n链接：https://www.jianshu.com/p/abe45e83fda7\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),r("hr"),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("作者：任无名 F\n链接：https://www.jianshu.com/p/a20f2023c78a\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),t._v(" "),t._m(68),t._v(" "),r("p",[t._v("React 会将当前传入的参数对象与组件当前的状态合并,然后触发调和过程,在调和的过程中,React 会以相对高效的方式根据新的状态构建 React 元素树并且重新渲染整个 UI 界面.")]),t._v(" "),r("p",[t._v("React 得到的元素树之后,React 会自动计算出新的树与老的树的节点的差异,然后根据差异对界面进行最小化的渲染,在 React 的差异算法中,React 能够精确的知道在哪些位置发生看改变以及应该如何去改变,这样就保证了 UI 是按需更新的而不是重新渲染整个界面.")]),t._v(" "),r("p",[t._v("作者：vbuer\n链接：https://www.jianshu.com/p/2f2d73e1ad5b\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")]),t._v(" "),t._m(69),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/u/0f5f06120371",target:"_blank",rel:"noopener noreferrer"}},[r("img",{attrs:{src:"https://upload.jianshu.io/users/upload_avatars/14942208/40bfec8e-98a3-4ebc-9003-d7aabbb6076b.jpg?imageMogr2/auto-orient/strip%7CimageView2/1/w/96/h/96/format/webp",alt:"img"}}),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.jianshu.com/u/0f5f06120371",target:"_blank",rel:"noopener noreferrer"}},[t._v("G_弦上的咏叹调"),r("OutboundLink")],1),t._v("关注")]),t._v(" "),r("p",[t._v("0.9272019.01.20 22:57:07 字数 975 阅读 5,845")]),t._v(" "),t._m(70),t._v(" "),r("p",[t._v("路由钩子函数有三种：")]),t._v(" "),r("p",[t._v("​ 1：全局钩子： beforeEach、 afterEach")]),t._v(" "),r("p",[t._v("​ 2：单个路由里面的钩子： beforeEnter、 beforeLeave")]),t._v(" "),r("p",[t._v("​ 3:组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave")]),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),r("p",[t._v("**\n**")]),t._v(" "),t._m(75),t._v(" "),r("p",[t._v("使用 router.beforeEach 注册一个全局前置守卫")]),t._v(" "),t._m(76),t._v(" "),r("p",[t._v("每个守卫方法接收三个参数：")]),t._v(" "),r("p",[t._v("①"),r("strong",[t._v("to: Route")]),t._v(": 即将要进入的目标"),r("a",{attrs:{href:"https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("路由对象"),r("OutboundLink")],1),t._v("（to 是一个对象，是将要进入的路由对象，可以用"),r("strong",[t._v("to.path")]),t._v("调用路由对象中的属性）")]),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),r("p",[t._v("next 参数：")]),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),r("p",[r("strong",[t._v("next('/') 或者 next({ path: '/' })")]),t._v(": 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在"),r("a",{attrs:{href:"https://router.vuejs.org/zh/api/#to",target:"_blank",rel:"noopener noreferrer"}},[t._v("router-link 的 to prop"),r("OutboundLink")],1),t._v("或"),r("a",{attrs:{href:"https://router.vuejs.org/zh/api/#router-push",target:"_blank",rel:"noopener noreferrer"}},[t._v("router.push"),r("OutboundLink")],1),t._v("中的选项。")]),t._v(" "),r("p",[r("strong",[t._v("next(error)")]),t._v(": (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给"),r("a",{attrs:{href:"https://router.vuejs.org/zh/api/#router-onerror",target:"_blank",rel:"noopener noreferrer"}},[t._v("router.onError()"),r("OutboundLink")],1),t._v("注册过的回调。")]),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),r("p",[t._v("和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身")]),t._v(" "),t._m(84),t._v(" "),t._m(85),t._v(" "),t._m(86),t._v(" "),r("p",[t._v("这些守卫与全局前置守卫的方法参数是一样的。")]),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),t._m(89),t._v(" "),t._m(90),t._v(" "),t._m(91),t._v(" "),t._m(92),t._v(" "),t._m(93),t._v(" "),r("p",[t._v("这个**离开守卫 beforeRouteLeave()**通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。")]),t._v(" "),t._m(94),t._v(" "),r("p",[t._v("完整的导航解析流程：")]),t._v(" "),r("p",[t._v("1.导航被触发。")]),t._v(" "),r("p",[t._v("2.在失活的组件里调用离开守卫。")]),t._v(" "),r("p",[t._v("3.调用全局的 beforeEach 守卫。")]),t._v(" "),r("p",[t._v("4.在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。")]),t._v(" "),r("p",[t._v("5.在路由配置里调用 beforeEnter。")]),t._v(" "),r("p",[t._v("6.解析异步路由组件。")]),t._v(" "),r("p",[t._v("7.在被激活的组件里调用 beforeRouteEnter。")]),t._v(" "),r("p",[t._v("8.调用全局的 beforeResolve 守卫 (2.5+)。")]),t._v(" "),r("p",[t._v("9.导航被确认。")]),t._v(" "),r("p",[t._v("10.调用全局的 afterEach 钩子。")]),t._v(" "),r("p",[t._v("11.触发 DOM 更新。")]),t._v(" "),r("p",[t._v("12.用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。")]),t._v(" "),t._m(95),t._v(" "),r("p",[t._v("一、回顾 vue 中的生命周期")]),t._v(" "),r("p",[t._v("beforeCreate created")]),t._v(" "),r("p",[t._v("beforeMount mounted")]),t._v(" "),r("p",[t._v("beforeUpdate updated")]),t._v(" "),r("p",[t._v("beforeDestroy destroyed")]),t._v(" "),r("p",[t._v("activated deactivated")]),t._v(" "),r("p",[t._v("二、react 生命周期钩子函数")]),t._v(" "),r("p",[t._v("初始化阶段")]),t._v(" "),r("p",[t._v("constructor 初始化数据---初始化状态")]),t._v(" "),r("p",[t._v("componentWillMount 以前建议进行 ajax 请求，最后一次修改状态的机会，但是现在基本上都 componentDidMount 中请求")]),t._v(" "),r("p",[t._v("render 第一次装载（渲染）数据")]),t._v(" "),r("p",[t._v("componentDidMount ajax 请求，更新状态，进入运行时阶段，更新视图，还可以实例化一些对象")]),t._v(" "),r("p",[t._v("运行时阶段")]),t._v(" "),r("p",[t._v("componentWillReceiveProps 子组件接收到父组件的数据")]),t._v(" "),r("p",[t._v("shouldComponentUpdate 本组件是不是需要进行去更新视图，默认为 true，要不不写，写了必写返回值，false 表示不更新视图")]),t._v(" "),r("p",[t._v("componentWillUpdate 组件即将被更新-----无实际意义")]),t._v(" "),r("p",[t._v("render 重新渲染数据")]),t._v(" "),r("p",[t._v("componentDidUpdate 实例化一些对象（特别是如果数据是动态请求的）")]),t._v(" "),r("p",[t._v("销毁")]),t._v(" "),r("p",[t._v("componentWillUnmount 清除一些计时器，定时器等")]),t._v(" "),r("p",[t._v("错误异常处理")]),t._v(" "),r("p",[t._v("componentDidCatch")]),t._v(" "),r("p",[t._v("componentDidCatch --- 错误边界作为 React 组件，用以捕获在子组件树中任何地方的 JavaScript 异常，打印这些错误，并展示备用 UI 而非让组件树崩溃。错误边界会捕获渲染期间，在生命周期方法中以及在其整个树的构造函数中的异常。")]),t._v(" "),r("p",[t._v("简单来说 就是使用异常的组件包裹 App 组件")]),t._v(" "),r("ErrorBoundary",[r("App")],1),t._v(" "),r("p",[t._v("ErrorBoundary 组件")]),t._v(" "),r("p",[t._v("class ErrorBoundary extends "),r("a",{attrs:{href:"http://react.component/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React.Component"),r("OutboundLink")],1),t._v(" {")]),t._v(" "),r("p",[t._v("constructor(props) {")]),t._v(" "),r("p",[t._v("super(props);")]),t._v(" "),r("p",[t._v("this.state = { hasError: false };")]),t._v(" "),r("p",[t._v("}")]),t._v(" "),r("p",[t._v("componentDidCatch(error, info) {")]),t._v(" "),r("p",[t._v("this.setState({ hasError: true });")]),t._v(" "),r("p",[t._v("}")]),t._v(" "),r("p",[t._v("render() {")]),t._v(" "),r("p",[t._v("if (this.state.hasError) {")]),t._v(" "),r("p",[t._v("return ")]),r("h1",[t._v("Something went wrong.")]),t._v(";"),r("p"),t._v(" "),r("p",[t._v("}")]),t._v(" "),r("p",[t._v("return this.props.children;")]),t._v(" "),r("p",[t._v("}")]),t._v(" "),r("p",[t._v("}")])],1)}),[function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[this._v("#")]),this._v(" Promise")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"promise-all-批量执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-all-批量执行"}},[this._v("#")]),this._v(" Promise.all() 批量执行")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"promise-race-类似于-promise-all-，区别在于它有任意一个完成就算完成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-race-类似于-promise-all-，区别在于它有任意一个完成就算完成"}},[this._v("#")]),this._v(" Promise.race() 类似于 Promise.all() ，区别在于它有任意一个完成就算完成")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"懒加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[this._v("#")]),this._v(" 懒加载")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("什么是懒加载？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/5070211-a85350f6ac063ddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/759/format/webp",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("浏览一个网页，准备往下拖动滚动条")]),this._v(" "),e("li",[this._v("拖动一个占位图片到视窗")]),this._v(" "),e("li",[this._v("占位图片被瞬间替换成最终的图片")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/5070211-b4120bdbd5933573.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/812/format/webp",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("为什么要懒加载而不直接加载？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("浪费流量。在不计流量收费的网络，这可能不重要；在按流量收费的网络中，毫无疑问，一次性加载大量图片就是在浪费用户的钱。")]),this._v(" "),e("li",[this._v("消耗额外的电量和其他的系统资源，并且延长了浏览器解析的时间。因为媒体资源在被下载完成后，浏览器必须对它进行解码，然后渲染在视窗上，这些操作都需要一定的时间。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("懒加载图片")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"内联图片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内联图片"}},[this._v("#")]),this._v(" 内联图片")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("最常见的懒加载方式就是利用"),e("code",[this._v("<img>")]),this._v("标签。懒加载图片时，我们利用 JavaScript 检查"),e("code",[this._v("<img>")]),this._v("标签是否在视窗中。如果在，"),e("code",[this._v("<img>")]),this._v("的 src（有时候是 srcset）就会设置为目标图片的 url。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h6",{attrs:{id:"利用-intersection-observer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#利用-intersection-observer"}},[this._v("#")]),this._v(" 利用 intersection observer")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[e("em",[this._v("注意：Intersection observer 目前只能在 Chrome63+和 firefox58+使用")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"js-基本数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-基本数据类型"}},[this._v("#")]),this._v(" JS 基本数据类型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"computed-和-watch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#computed-和-watch"}},[this._v("#")]),this._v(" computed 和 watch")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于任何复杂逻辑，你都应当使用"),e("strong",[this._v("计算属性")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vue-路由传参"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-路由传参"}},[this._v("#")]),this._v(" vue 路由传参")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vue-刷新当前页面的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-刷新当前页面的方法"}},[this._v("#")]),this._v(" vue 刷新当前页面的方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"hash-模式和-history-模式的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hash-模式和-history-模式的不同"}},[this._v("#")]),this._v(" hash 模式和 history 模式的不同")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("为了达到这一目的，浏览器当前提供了以下两种支持：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("hash —— 即地址栏 URL 中的 # 符号（此 hash 不是密码学里的散列运算）。比如这个 URL：http://www.abc.com/#/hello，hash 的值为 #/hello。它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。")]),this._v(" "),e("li",[this._v("history —— 利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支持）这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求。")]),this._v(" "),e("li",[this._v("因此可以说，hash 模式和 history 模式都属于浏览器自身的特性，Vue-Router 只是利用了这两个特性（通过调用浏览器提供的接口）来实现前端路由.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("使用场景")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("pushState() 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改 # 后面的部分，因此只能设置与当前 URL 同文档的 URL；")]),this._v(" "),e("li",[this._v("pushState() 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash 设置的新值必须与原来不一样才会触发动作将记录添加到栈中；")]),this._v(" "),e("li",[this._v("pushState() 通过 stateObject 参数可以添加任意类型的数据到记录中；而 hash 只可添加短字符串；")]),this._v(" "),e("li",[this._v("pushState() 可额外设置 title 属性供后续使用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("总结")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"axios-和-ajax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#axios-和-ajax"}},[this._v("#")]),this._v(" axios 和 ajax")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("p",[t._v("传统 Ajax 指的是 XMLHttpRequest（XHR）， 最早出现的发送后端请求技术，隶属于原始 js 中，核心使用 XMLHttpRequest 对象，多个请求之间如果有先后关系的话，就会出现"),r("strong",[t._v("回调地狱")]),t._v("。")])]),t._v(" "),r("li",[r("p",[t._v("JQuery ajax 是对原生 XHR 的封装，除此以外还增添了对"),r("strong",[t._v("JSONP")]),t._v("的支持。经过多年的更新维护，真的已经是非常的方便了，优点无需多言；如果是硬要举出几个缺点，那可能只有： 1.本身是针对 MVC 的编程,不符合现在前端"),r("strong",[t._v("MVVM")]),t._v("的浪潮 2.基于原生的 XHR 开发，XHR 本身的架构不清晰。\n3.JQuery 整个项目太大，单纯使用 ajax 却要引入整个 JQuery 非常的不合理（采取个性化打包的方案又不能享受 C DN 服务） 4.不符合关注分离（Separation of Concerns）的原则 5.配置和调用方式非常混乱，而且基于事件的异步模型不友好。")])]),t._v(" "),r("li",[r("p",[t._v("axios 是一个基于 Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生 XHR 的封装，只不过它是 Promise 的实现版本，符合最新的 ES 规范，它本身具有以下特征： 1.从浏览器中创建 XMLHttpRequest 2.支持 Promise API 3.客户端支持防止 CSRF 4.提供了一些并发请求的接口（重要，方便了很多的操作） 5.从 node.js 创建 http 请求 6.拦截请求和响应 7.转换请求和响应数据 8.取消请求 9.自动转换 JSON 数据\n"),r("strong",[t._v("PS:防止 CSRF:就是让你的每个请求都带一个从 cookie 中拿到的 key, 根据浏览器同源策略，假冒的网站是拿不到你 cookie 中得 key 的，这样，后台就可以轻松辨别出这个请求是否是用户在假冒网站上的误导输入，从而采取正确的策略。")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("3.fetch")])])])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"language-jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-jsx"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" response "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("json")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Oops, error'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("fetch 号称是 AJAX 的替代品，是在 ES6 出现的，使用了 ES6 中的 promise 对象。Fetch 是基于 promise 设计的。Fetch 的代码结构比起 ajax 简单多了，参数有点像 jQuery ajax。但是，一定记住"),e("strong",[this._v("fetch 不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象")]),this._v("。\nfetch 的优点： 1.符合关注分离，没有将输入、输出和用事件来跟踪的状态混杂在一个对象里 2.更好更方便的写法\n坦白说，上面的理由对我来说完全没有什么说服力，因为不管是 Jquery 还是 Axios 都已经帮我们把 xhr 封装的足够好，使用起来也足够方便，为什么我们还要花费大力气去学习 fetch？\n我认为 fetch 的优势主要优势就是：")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"language-jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-jsx"}},[r("code",[r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("  语法简洁，更加语义化\n"),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("  基于标准 Promise 实现，支持 async"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("  同构方便，使用 "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("isomorphic"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("fetch"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("https"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("github"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("matthew"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("andrews"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("isomorphic"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("fetch"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v("更加底层，提供的"),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("API")]),t._v("丰富（request"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response）\n"),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),t._v("脱离了"),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XHR")]),t._v("，是"),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ES")]),t._v("规范里新的实现方式\n")])])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"language-css extra-class"},[r("pre",{pre:!0,attrs:{class:"language-css"}},[r("code",[r("span",{pre:!0,attrs:{class:"token selector"}},[t._v("1）fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\n2）fetch默认不会带cookie，需要添加配置项： fetch(url,")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token property"}},[t._v("credentials")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'include'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n3）fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\n4）fetch没有办法原生监测请求的进度，而XHR可以\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("总结：axios 既提供了并发的封装，也没有 fetch 的各种问题，而且体积也较小，当之无愧现在最应该选用的请求的方式。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[this._v("#")]),this._v(" 闭包")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("当一个函数返回它内部定义的一个函数时，就产生了一个闭包，闭包不但包括被返回的函数，还包括这个函数的定义环境。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("缺点：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致"),e("strong",[this._v("内存泄露")]),this._v("。"),e("strong",[this._v("解决方法是，在退出函数之前，将不使用的局部变量全部删除。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"什么是原型和原型链？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型和原型链？"}},[this._v("#")]),this._v(" 什么是原型和原型链？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Js 中的对象都有一个属性叫做"),e("strong",[this._v("proto")]),this._v("(也是一个对象)，表示对象的原型。当访问对象中的属性或方法时，首先在对象本身中寻找，如果找不到则会在原型中寻找，原型中也找不到时会在原型的原型中寻找，直到最顶层为止。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("js 中的类(构造函数)都有一个 prototype 的属性，表示本类的原型类型，通过这个类实例化的对象(这个构造函数创建的对象)， "),e("strong",[this._v("proto")]),this._v("都指向本类的 prototype，从而实现了类方法的共享。一个类的 prototype 也是一个对象，它也有"),e("strong",[this._v("proto")]),this._v("，把它的"),e("strong",[this._v("proto")]),this._v("指向另一个类的 prototype 时，那么这个类的对象就能访问另一个类中的方法，从而实现了方法的继承。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A 类的 prototype."),e("strong",[this._v("proto")]),this._v("指向另一个类 B，B 的 prototype."),e("strong",[this._v("proto")]),this._v("又可以指向 C，这种结构叫做原型链。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"new-对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new-对象"}},[this._v("#")]),this._v(" new 对象")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("创建一个空对象")]),t._v(" "),r("li",[t._v("将所创建对象的"),r("strong",[t._v("proto")]),t._v("属性值设为构造函数的 prototype 的属性值")]),t._v(" "),r("li",[t._v("执行构造函数中的代码，构造函数中的 this 指向该对象")]),t._v(" "),r("li",[t._v("返回对象")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"redux-工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux-工作流程"}},[this._v("#")]),this._v(" Redux 工作流程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("之前在公司学习 react 的时候没有学习 redux 而是以开始就让我学习使用 Dva ,Dva 是阿里系的框架,最近也是很火,受到许多使用 react 公司的青睐,毕竟学习成本比 redux 要低很多;然而想要成为 react 方向的前端程序员,redux 肯定是使用的更多的,Redux 是目前 React 生态中，最好的数据层框架,所以在前一段时间就开始学习 redux 并最终完成一些项目,")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("作为程序员,分享是最基本的素养,我接下来将会把每天的学习成果在此分享,希望能有一起学习的同学交流分享")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("(本文章是参考 jsp.com 播客编写,有兴趣的可以去阅读,目前是我遇到最喜欢的 react 教程)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Redux 是目前 React 生态中最好的数据层框架,理解 redux 最重要的就是他的数据流向,官方文档中清楚的给出了数据流向图!!!!")]),this._v(" "),e("p",[e("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/19876323-695042e776ea058f?imageMogr2/auto-orient/strip%7CimageView2/2/w/828/format/webp",alt:"img"}})]),this._v(" "),e("p",[this._v("Redux 数据流向图")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("如上图中 更能清楚明白 redux 对于 javascript 应用而言是一个可预测状态的容器，即它是一个数据流框架。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("redux 主要用作应用状态的管理，即 redux 用一个单独的常量状态树（对象）保持这一整个应用的状态，这个对象不能直接被改变。如果一些数据变化了，一个新的对象就会被创建（使用 action 和 reducers）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("图中容易看出所有的东西都是以 store 为核心,我们把它看成数据存储中心,数据银行,但是他要更改数据的时候不能直接修改,数据修改更新的角色由 Reducers 来担任, store 只做存储,中间人,当 Reducers 的更新完成以后会通过 store 的订阅来通知 react component ,组件把新的状态重新获取渲染,组件中我们也能主动发送 action,创建 action 后这个动作是不会执行的,所以要 dispatch 这个 action,让 store 通过 reducers 去做更新")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("React Component 就是 react 的每个组件啦")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("React Component---人想去贷款创业")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("store ----银行的钱")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Reducers----银行信贷系统")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Action Creator----人自己去贷款的动作")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("你细品下.......")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("你(React Component)想改变自己的经济状况,产生一个去贷款的动作(Action Creato),找到了银行的钱(store),管理员调用信贷系统(Reducers),管理员把钱给你,你变了你的经济状况(更改了状态重新渲染组件)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"纯函数-pure-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#纯函数-pure-function"}},[this._v("#")]),this._v(" 纯函数 Pure Function")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("什么是副作用")]),this._v("\n除了修改外部的变量，一个函数在执行过程中还有很多方式产生外部可观察的变化，比如说调用 DOM API 修改页面，或者你发送了 Ajax 请求，还有调用 window.reload 刷新浏览器，甚至是 console.log 往控制台打印数据也是副作用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("3.没有额外的状态依赖")]),this._v("\n指方法内的状态都只在方法的生命周期内存活，这意味着不能在方法内使用共享变量，因为会带来不可知因素。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("为什么需要纯函数？")]),this._v("\n因为纯函数非常“靠谱”，执行一个纯函数你不用担心它会干什么坏事，它不会产生不可预料的行为，也不会对外部产生影响。不管何时何地，你给它什么它就会乖乖地吐出什么。如果你的应用程序大多数函数都是由纯函数组成，那么你的程序测试、调试起来会非常方便。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vue-生命周期钩子函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-生命周期钩子函数"}},[this._v("#")]),this._v(" vue 生命周期钩子函数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("beforeCreate")]),this._v("\n**官方说明：**在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。\n**解释：**这个时期，this 变量还不能使用，在 data 下的数据，和 methods 下的方法，watcher 中的事件都不能获得到；")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("created")]),this._v("\n**官方说明：**实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n"),e("strong",[this._v("解释说明：")]),this._v(' 这个时候可以操作 vue 实例中的数据和各种方法，但是还不能对"dom"节点进行操作；')])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("beforeMounte")]),this._v("\n**官方说明：**在挂载开始之前被调用：相关的 render 函数首次被调用。")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[r("code",[t._v("mounted")]),t._v(" "),r("strong",[t._v("官方说明：")]),r("code",[t._v("el")]),t._v(" 被新创建的 "),r("code",[t._v("vm.$el")]),t._v(" 替换，并挂载到实例上去之后调用该钩子。如果"),r("code",[t._v("root")]),t._v("实例挂载了一个文档内元素，当 "),r("code",[t._v("mounted")]),t._v(" 被调用时 "),r("code",[t._v("vm.$el")]),t._v(" 也在文档内。\n**解释说明：**挂载完毕，这时"),r("code",[t._v("dom")]),t._v("节点被渲染到文档内，一些需要"),r("code",[t._v("dom")]),t._v("的操作在此时才能正常进行")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[t._v("beforeUpdate：$vm.data更新之后，"),r("strong",[t._v("虚拟DOM重新渲染")]),t._v(" 和打补丁之前被调用。\n你可以在这个钩子中进一步地修改$vm.data，这不会触发附加的重渲染过程。")]),t._v(" "),r("li",[t._v("updated："),r("strong",[t._v("虚拟 DOM 重新渲染")]),t._v(" 和打补丁之后被调用。\n当这个钩子被调用时，组件 DOM 的 data 已经更新，所以你现在可以执行依赖于 DOM 的操作。但是不要在此时修改 data，否则会继续触发 beforeUpdate、updated 这两个生命周期，进入死循环！")]),t._v(" "),r("li",[t._v("beforeDestroy：实例被销毁之前调用。在这一步，实例仍然完全可用。\n实例要被销毁了，赶在被销毁之前搞点事情吧哈哈~")]),t._v(" "),r("li",[t._v("destroyed：Vue 实例销毁后调用。此时，Vue 实例指示的所有东西已经解绑定，所有的事件监听器都已经被移除，所有的子实例也已经被销毁。\n这时候能做的事情已经不多了，只能加点儿提示 toast 之类的东西吧。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("注")]),this._v("：beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed 这几个钩子函数，在服务器端渲染期间不被调用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"react-中调用-setstate-之后发生了什么事情"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-中调用-setstate-之后发生了什么事情"}},[this._v("#")]),this._v(" React 中调用 setState 之后发生了什么事情?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"vue-router-路由钩子函数-导航守卫"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-路由钩子函数-导航守卫"}},[this._v("#")]),this._v(" Vue-Router 路由钩子函数(导航守卫)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("—— "),e("strong",[this._v("“导航”表示路由正在发生改变。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_1-全局守卫"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局守卫"}},[this._v("#")]),this._v(" "),e("strong",[this._v("1.全局守卫")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("无论访问哪一个路径，都会触发全局的钩子函数，位置是调用 router 的方法")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("router.beforeEach() 进入之前触发")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("router.afterEach() 进入之后触发")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("⑴ beforeEach（全局前置守卫）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/14942208-147d403d5e50196b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/312/format/webp",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("②"),e("strong",[this._v("from: Route")]),this._v(": 当前导航正要离开的路由")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("③"),e("strong",[this._v("next: Function")]),this._v(": 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("next()")]),this._v(": 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是"),e("strong",[this._v("confirmed")]),this._v(" (确认的)。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("next(false)")]),this._v(": **中断当前的导航。**如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("ps~ : 确保要调用 next 方法，否则钩子就不会被 resolved。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("(2). afterEach（全局后置钩子）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/14942208-0e932e75e7230e5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/260/format/webp",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_2-路由独享的守卫-单个路由独享的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-路由独享的守卫-单个路由独享的"}},[this._v("#")]),this._v(" "),e("strong",[this._v("2.路由独享的守卫(单个路由独享的)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("写在路由配置中，只有访问到这个路径，才能触发钩子函数")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/14942208-7e61134f639d3991.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/326/format/webp",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_3-组件级路由钩子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-组件级路由钩子"}},[this._v("#")]),this._v(" "),e("strong",[this._v("3.组件级路由钩子")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("写在组件中,访问路径，即将渲染组件的时候触发的")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("blockquote",[r("p",[t._v("{")]),t._v(" "),r("p",[t._v("data,")]),t._v(" "),r("p",[t._v("methods")]),t._v(" "),r("p",[t._v("beforeRouteEnter(){")]),t._v(" "),r("p",[t._v("​ this 不指向实例 组件还没创建")]),t._v(" "),r("p",[t._v("​ next((vm) =>{")]),t._v(" "),r("p",[t._v("​ vm 就是实例")]),t._v(" "),r("p",[t._v("​ })")]),t._v(" "),r("p",[t._v("}")]),t._v(" "),r("p",[t._v("beforeRouteUpdate(){}")]),t._v(" "),r("p",[t._v("beforeRouteLeave(){}")]),t._v(" "),r("p",[t._v("}")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/14942208-ce6e88dc632eedf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/633/format/webp",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("beforeRouteEnter 守卫 "),e("strong",[this._v("不能")]),this._v(" 访问 "),e("strong",[this._v("this")]),this._v("，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next 来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/14942208-e15c09164823cf1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/282/format/webp",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("注意~ ：")]),this._v(" beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以"),e("strong",[this._v("不支持")]),this._v("传递回调，因为没有必要了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/14942208-0b0d29ca76e7894e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/686/format/webp",alt:"img"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"react-生命周期钩子函数详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-生命周期钩子函数详解"}},[this._v("#")]),this._v(" React 生命周期钩子函数详解")])}],!1,null,null,null);e.default=a.exports}}]);