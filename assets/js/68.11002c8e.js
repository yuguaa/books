(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{234:function(t,a,e){"use strict";e.r(a);var r=e(0),_=Object(r.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"react-面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-面试题"}},[t._v("#")]),t._v(" "),e("strong",[t._v("React 面试题")])]),t._v(" "),e("p",[t._v("以下是面试官最有可能问到的 "),e("strong",[t._v("50 个 React 面试题和答案")]),t._v("。为方便你学习，我对它们进行了分类：")]),t._v(" "),e("ul",[e("li",[t._v("基本知识")]),t._v(" "),e("li",[t._v("React 组件")]),t._v(" "),e("li",[t._v("React Redux")]),t._v(" "),e("li",[t._v("React 路由")])]),t._v(" "),e("h2",{attrs:{id:"基本知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本知识"}},[t._v("#")]),t._v(" "),e("strong",[t._v("基本知识")])]),t._v(" "),e("h3",{attrs:{id:"_1-区分-real-dom-和-virtual-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-区分-real-dom-和-virtual-dom"}},[t._v("#")]),t._v(" "),e("strong",[t._v("1. 区分 Real DOM 和 Virtual DOM")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("Real DOM")])]),t._v(" "),e("th",[e("strong",[t._v("Virtual DOM")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("1. 更新缓慢。")]),t._v(" "),e("td",[t._v("1. 更新更快。")])]),t._v(" "),e("tr",[e("td",[t._v("2. 可以直接更新 HTML。")]),t._v(" "),e("td",[t._v("2. 无法直接更新 HTML。")])]),t._v(" "),e("tr",[e("td",[t._v("3. 如果元素更新，则创建新 DOM。")]),t._v(" "),e("td",[t._v("3. 如果元素更新，则更新 JSX 。")])]),t._v(" "),e("tr",[e("td",[t._v("4. DOM 操作代价很高。")]),t._v(" "),e("td",[t._v("4. DOM 操作非常简单。")])]),t._v(" "),e("tr",[e("td",[t._v("5. 消耗的内存较多。")]),t._v(" "),e("td",[t._v("5. 很少的内存消耗。")])])])]),t._v(" "),e("h3",{attrs:{id:"_2-什么是-react？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是-react？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("2. 什么是 React？")])]),t._v(" "),e("ul",[e("li",[t._v("React 是 Facebook 在 2011 年开发的前端 JavaScript 库。")]),t._v(" "),e("li",[t._v("它遵循基于组件的方法，有助于构建可重用的 UI 组件。")]),t._v(" "),e("li",[t._v("它用于开发复杂和交互式的 Web 和移动 UI。")]),t._v(" "),e("li",[t._v("尽管它仅在 2015 年开源，但有一个很大的支持社区。")])]),t._v(" "),e("h3",{attrs:{id:"_3-react-有什么特点？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-react-有什么特点？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("3. React 有什么特点？")])]),t._v(" "),e("p",[t._v("React 的主要功能如下：")]),t._v(" "),e("ol",[e("li",[t._v("它使用**虚拟 DOM **而不是真正的 DOM。")]),t._v(" "),e("li",[t._v("它可以用"),e("strong",[t._v("服务器端渲染")]),t._v("。")]),t._v(" "),e("li",[t._v("它遵循"),e("strong",[t._v("单向数据流")]),t._v("或数据绑定。")])]),t._v(" "),e("h3",{attrs:{id:"_4-列出-react-的一些主要优点。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-列出-react-的一些主要优点。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("4. 列出 React 的一些主要优点。")])]),t._v(" "),e("p",[t._v("React 的一些主要优点是：")]),t._v(" "),e("ol",[e("li",[t._v("它提高了应用的性能")]),t._v(" "),e("li",[t._v("可以方便地在客户端和服务器端使用")]),t._v(" "),e("li",[t._v("由于 JSX，代码的可读性很好")]),t._v(" "),e("li",[t._v("React 很容易与 Meteor，Angular 等其他框架集成")]),t._v(" "),e("li",[t._v("使用 React，编写 UI 测试用例变得非常容易")])]),t._v(" "),e("h3",{attrs:{id:"_5-react-有哪些限制？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-react-有哪些限制？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("5. React 有哪些限制？")])]),t._v(" "),e("p",[t._v("React 的限制如下：")]),t._v(" "),e("ol",[e("li",[t._v("React 只是一个库，而不是一个完整的框架")]),t._v(" "),e("li",[t._v("它的库非常庞大，需要时间来理解")]),t._v(" "),e("li",[t._v("新手程序员可能很难理解")]),t._v(" "),e("li",[t._v("编码变得复杂，因为它使用内联模板和 JSX")])]),t._v(" "),e("h3",{attrs:{id:"_6-什么是-jsx？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-什么是-jsx？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("6. 什么是 JSX？")])]),t._v(" "),e("p",[t._v("JSX 是 J avaScript XML 的简写。是 React 使用的一种文件，它利用 JavaScript 的表现力和类似 HTML 的模板语法。这使得 HTML 文件非常容易理解。此文件能使应用非常可靠，并能够提高其性能。下面是 JSX 的一个例子：")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Hello World "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" Edureka"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"_7-你了解-virtual-dom-吗？解释一下它的工作原理。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-你了解-virtual-dom-吗？解释一下它的工作原理。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("7. 你了解 Virtual DOM 吗？解释一下它的工作原理。")])]),t._v(" "),e("p",[t._v("Virtual DOM 是一个轻量级的 JavaScript 对象，它最初只是 real DOM 的副本。它是一个节点树，它将元素、它们的属性和内容作为对象及其属性。 React 的渲染函数从 React 组件中创建一个节点树。然后它响应数据模型中的变化来更新该树，该变化是由用户或系统完成的各种动作引起的。")]),t._v(" "),e("p",[t._v("Virtual DOM 工作过程有三个简单的步骤。")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("每当底层数据发生改变时，整个 UI 都将在 Virtual DOM 描述中重新渲染。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/68598-d9cf92a6a8a5d2e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}})]),t._v(" "),e("p",[t._v("Virtual DOM 1")])]),t._v(" "),e("li",[e("p",[t._v("然后计算之前 DOM 表示与新表示的之间的差异。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/68598-8194c44de20897bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1079/format/webp",alt:"img"}})]),t._v(" "),e("p",[t._v("Virtual DOM 2")])]),t._v(" "),e("li",[e("p",[t._v("完成计算后，将只用实际更改的内容更新 real DOM。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/68598-8d56d05528334e46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/531/format/webp",alt:"img"}})]),t._v(" "),e("p",[t._v("Virtual DOM 3")])])]),t._v(" "),e("h3",{attrs:{id:"_8-为什么浏览器无法读取-jsx？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-为什么浏览器无法读取-jsx？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("8. 为什么浏览器无法读取 JSX？")])]),t._v(" "),e("p",[t._v("浏览器只能处理 JavaScript 对象，而不能读取常规 JavaScript 对象中的 JSX。所以为了使浏览器能够读取 JSX，首先，需要用像 Babel 这样的 JSX 转换器将 JSX 文件转换为 JavaScript 对象，然后再将其传给浏览器。")]),t._v(" "),e("h3",{attrs:{id:"_9-与-es5-相比，react-的-es6-语法有何不同？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-与-es5-相比，react-的-es6-语法有何不同？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("9. 与 ES5 相比，React 的 ES6 语法有何不同？")])]),t._v(" "),e("p",[t._v("以下语法是 ES5 与 ES6 中的区别：")]),t._v(" "),e("ol",[e("li",[t._v("require 与 import")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ES5\nvar React = require('react');\n\n// ES6\nimport React from 'react';\n")])])]),e("ol",[e("li",[t._v("export 与 exports")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ES5\nmodule.exports = Component;\n\n// ES6\nexport default Component;\n")])])]),e("ol",[e("li",[t._v("component 和 function")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ES5\nvar MyComponent = React.createClass({\n    render: function() {\n        return\n            <h3>Hello Edureka!</h3>;\n    }\n});\n\n// ES6\nclass MyComponent extends React.Component {\n    render() {\n        return\n            <h3>Hello Edureka!</h3>;\n    }\n}\n")])])]),e("ol",[e("li",[t._v("props")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ES5\nvar App = React.createClass({\n    propTypes: { name: React.PropTypes.string },\n    render: function() {\n        return\n            <h3>Hello, {this.props.name}!</h3>;\n    }\n});\n\n// ES6\nclass App extends React.Component {\n    render() {\n        return\n            <h3>Hello, {this.props.name}!</h3>;\n    }\n}\n")])])]),e("ol",[e("li",[t._v("state")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ES5\nvar App = React.createClass({\n    getInitialState: function() {\n        return { name: 'world' };\n    },\n    render: function() {\n        return\n            <h3>Hello, {this.state.name}!</h3>;\n    }\n});\n\n// ES6\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = { name: 'world' };\n    }\n    render() {\n        return\n            <h3>Hello, {this.state.name}!</h3>;\n    }\n}\n")])])]),e("h3",{attrs:{id:"_10-react-与-angular-有何不同？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-react-与-angular-有何不同？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("10. React 与 Angular 有何不同？")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("主题")])]),t._v(" "),e("th",[e("strong",[t._v("React")])]),t._v(" "),e("th",[e("strong",[t._v("Angular")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("em",[t._v("1. 体系结构")])]),t._v(" "),e("td",[t._v("只有 MVC 中的 View")]),t._v(" "),e("td",[t._v("完整的 MVC")])]),t._v(" "),e("tr",[e("td",[e("em",[t._v("2. 渲染")])]),t._v(" "),e("td",[t._v("可以在服务器端渲染")]),t._v(" "),e("td",[t._v("客户端渲染")])]),t._v(" "),e("tr",[e("td",[e("em",[t._v("3. DOM")])]),t._v(" "),e("td",[t._v("使用 virtual DOM")]),t._v(" "),e("td",[t._v("使用 real DOM")])]),t._v(" "),e("tr",[e("td",[e("em",[t._v("4. 数据绑定")])]),t._v(" "),e("td",[t._v("单向数据绑定")]),t._v(" "),e("td",[t._v("双向数据绑定")])]),t._v(" "),e("tr",[e("td",[e("em",[t._v("5. 调试")])]),t._v(" "),e("td",[t._v("编译时调试")]),t._v(" "),e("td",[t._v("运行时调试")])]),t._v(" "),e("tr",[e("td",[e("em",[t._v("6. 作者")])]),t._v(" "),e("td",[t._v("Facebook")]),t._v(" "),e("td",[t._v("Google")])])])]),t._v(" "),e("h2",{attrs:{id:"react-组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-组件"}},[t._v("#")]),t._v(" "),e("strong",[t._v("React 组件")])]),t._v(" "),e("h3",{attrs:{id:"_11-你理解“在-react-中，一切都是组件”这句话。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-你理解“在-react-中，一切都是组件”这句话。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("11. 你理解“在 React 中，一切都是组件”这句话。")])]),t._v(" "),e("p",[t._v("组件是 React 应用 UI 的构建块。这些组件将整个 UI 分成小的独立并可重用的部分。每个组件彼此独立，而不会影响 UI 的其余部分。")]),t._v(" "),e("h3",{attrs:{id:"_12-解释-react-中-render-的目的。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-解释-react-中-render-的目的。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("12. 解释 React 中 render() 的目的。")])]),t._v(" "),e("p",[t._v("每个 React 组件强制要求必须有一个 "),e("strong",[t._v("render()")]),t._v("。它返回一个 React 元素，是原生 DOM 组件的表示。如果需要渲染多个 HTML 元素，则必须将它们组合在一个封闭标记内，例如 "),e("code",[t._v("、")]),t._v("、`` 等。此函数必须保持纯净，即必须每次调用时都返回相同的结果。")]),t._v(" "),e("h3",{attrs:{id:"_13-如何将两个或多个组件嵌入到一个组件中？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-如何将两个或多个组件嵌入到一个组件中？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("13. 如何将两个或多个组件嵌入到一个组件中？")])]),t._v(" "),e("p",[t._v("可以通过以下方式将组件嵌入到一个组件中：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class MyComponent extends React.Component{\n    render(){\n        return(\n            <div>\n                <h1>Hello</h1>\n                <Header/>\n            </div>\n        );\n    }\n}\nclass Header extends React.Component{\n    render(){\n        return\n            <h1>Header Component</h1>\n   };\n}\nReactDOM.render(\n    <MyComponent/>, document.getElementById('content')\n);\n")])])]),e("h3",{attrs:{id:"_14-什么是-props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-什么是-props"}},[t._v("#")]),t._v(" "),e("strong",[t._v("14. 什么是 Props?")])]),t._v(" "),e("p",[t._v("Props 是 React 中属性的简写。它们是只读组件，必须保持纯，即不可变。它们总是在整个应用中从父组件传递到子组件。子组件永远不能将 prop 送回父组件。这有助于维护单向数据流，通常用于呈现动态生成的数据。")]),t._v(" "),e("h3",{attrs:{id:"_15-react-中的状态是什么？它是如何使用的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-react-中的状态是什么？它是如何使用的？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("15. React 中的状态是什么？它是如何使用的？")])]),t._v(" "),e("p",[t._v("状态是 React 组件的核心，是数据的来源，必须尽可能简单。基本上状态是确定组件呈现和行为的对象。与 props 不同，它们是可变的，并创建动态和交互式组件。可以通过 "),e("code",[t._v("this.state()")]),t._v(" 访问它们。")]),t._v(" "),e("h3",{attrs:{id:"_16-区分状态和-props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-区分状态和-props"}},[t._v("#")]),t._v(" "),e("strong",[t._v("16. 区分状态和 props")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("条件")])]),t._v(" "),e("th",[e("strong",[t._v("State")])]),t._v(" "),e("th",[e("strong",[t._v("Props")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("1. 从父组件中接收初始值")]),t._v(" "),e("td",[t._v("Yes")]),t._v(" "),e("td",[t._v("Yes")])]),t._v(" "),e("tr",[e("td",[t._v("2. 父组件可以改变值")]),t._v(" "),e("td",[t._v("No")]),t._v(" "),e("td",[t._v("Yes")])]),t._v(" "),e("tr",[e("td",[t._v("3. 在组件中设置默认值")]),t._v(" "),e("td",[t._v("Yes")]),t._v(" "),e("td",[t._v("Yes")])]),t._v(" "),e("tr",[e("td",[t._v("4. 在组件的内部变化")]),t._v(" "),e("td",[t._v("Yes")]),t._v(" "),e("td",[t._v("No")])]),t._v(" "),e("tr",[e("td",[t._v("5. 设置子组件的初始值")]),t._v(" "),e("td",[t._v("Yes")]),t._v(" "),e("td",[t._v("Yes")])]),t._v(" "),e("tr",[e("td",[t._v("6. 在子组件的内部更改")]),t._v(" "),e("td",[t._v("No")]),t._v(" "),e("td",[t._v("Yes")])])])]),t._v(" "),e("h3",{attrs:{id:"_17-如何更新组件的状态？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-如何更新组件的状态？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("17. 如何更新组件的状态？")])]),t._v(" "),e("p",[t._v("可以用 "),e("code",[t._v("this.setState()")]),t._v("更新组件的状态。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class MyComponent extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            name: 'Maxx',\n            id: '101'\n        }\n    }\n    render()\n        {\n            setTimeout(()=>{this.setState({name:'Jaeha', id:'222'})},2000)\n            return (\n                <div>\n                    <h1>Hello {this.state.name}</h1>\n                    <h2>Your Id is {this.state.id}</h2>\n                </div>\n            );\n        }\n    }\nReactDOM.render(\n    <MyComponent/>, document.getElementById('content')\n);\n")])])]),e("h3",{attrs:{id:"_18-react-中的箭头函数是什么？怎么用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-react-中的箭头函数是什么？怎么用？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("18. React 中的箭头函数是什么？怎么用？")])]),t._v(" "),e("p",[t._v("箭头函数（"),e("strong",[t._v("=>")]),t._v("）是用于编写函数表达式的简短语法。这些函数允许正确绑定组件的上下文，因为在 ES6 中默认下不能使用自动绑定。使用高阶函数时，箭头函数非常有用。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//General way\nrender() {\n    return(\n        <MyInput onChange = {this.handleChange.bind(this) } />\n    );\n}\n//With Arrow Function\nrender() {\n    return(\n        <MyInput onChange = { (e)=>this.handleOnChange(e) } />\n    );\n}\n")])])]),e("h3",{attrs:{id:"_19-区分有状态和无状态组件。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-区分有状态和无状态组件。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("19. 区分有状态和无状态组件。")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("有状态组件")])]),t._v(" "),e("th",[e("strong",[t._v("无状态组件")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("1. 在内存中存储有关组件状态变化的信息")]),t._v(" "),e("td",[t._v("1. 计算组件的内部的状态")])]),t._v(" "),e("tr",[e("td",[t._v("2. 有权改变状态")]),t._v(" "),e("td",[t._v("2. 无权改变状态")])]),t._v(" "),e("tr",[e("td",[t._v("3. 包含过去、现在和未来可能的状态变化情况")]),t._v(" "),e("td",[t._v("3. 不包含过去，现在和未来可能发生的状态变化情况")])]),t._v(" "),e("tr",[e("td",[t._v("4. 接受无状态组件状态变化要求的通知，然后将 props 发送给他们。")]),t._v(" "),e("td",[t._v("4.从有状态组件接收 props 并将其视为回调函数。")])])])]),t._v(" "),e("h3",{attrs:{id:"_20-react-组件生命周期的阶段是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-react-组件生命周期的阶段是什么？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("20. React 组件生命周期的阶段是什么？")])]),t._v(" "),e("p",[t._v("React 组件的生命周期有三个不同的阶段：")]),t._v(" "),e("ol",[e("li",[t._v("*初始渲染阶段：*这是组件即将开始其生命之旅并进入 DOM 的阶段。")]),t._v(" "),e("li",[t._v("*更新阶段：*一旦组件被添加到 DOM，它只有在 prop 或状态发生变化时才可能更新和重新渲染。这些只发生在这个阶段。")]),t._v(" "),e("li",[t._v("*卸载阶段：*这是组件生命周期的最后阶段，组件被销毁并从 DOM 中删除。")])]),t._v(" "),e("h3",{attrs:{id:"_21-详细解释-react-组件的生命周期方法。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-详细解释-react-组件的生命周期方法。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("21. 详细解释 React 组件的生命周期方法。")])]),t._v(" "),e("p",[t._v("一些最重要的生命周期方法是：")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("*componentWillMount*****()")]),t._v(" – 在渲染之前执行，在客户端和服务器端都会执行。")]),t._v(" "),e("li",[e("strong",[t._v("*componentDidMount*****()")]),t._v(" – 仅在第一次渲染后在客户端执行。")]),t._v(" "),e("li",[e("strong",[t._v("*componentWillReceiveProps*****()")]),t._v(" – 当从父类接收到 props 并且在调用另一个渲染器之前调用。")]),t._v(" "),e("li",[e("strong",[t._v("*shouldComponentUpdate*****()")]),t._v(" – 根据特定条件返回 true 或 false。如果你希望更新组件，请返回"),e("strong",[t._v("true")]),t._v(" 否则返回 "),e("strong",[t._v("false")]),t._v("。默认情况下，它返回 false。")]),t._v(" "),e("li",[e("strong",[t._v("*componentWillUpdate*****()")]),t._v(" – 在 DOM 中进行渲染之前调用。")]),t._v(" "),e("li",[e("strong",[t._v("*componentDidUpdate*****()")]),t._v(" – 在渲染发生后立即调用。")]),t._v(" "),e("li",[e("strong",[t._v("*componentWillUnmount*****()")]),t._v(" – 从 DOM 卸载组件后调用。用于清理内存空间。")])]),t._v(" "),e("h3",{attrs:{id:"_22-react-中的事件是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-react-中的事件是什么？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("22. React 中的事件是什么？")])]),t._v(" "),e("p",[t._v("在 React 中，事件是对鼠标悬停、鼠标单击、按键等特定操作的触发反应。处理这些事件类似于处理 DOM 元素中的事件。但是有一些语法差异，如：")]),t._v(" "),e("ol",[e("li",[t._v("用驼峰命名法对事件命名而不是仅使用小写字母。")]),t._v(" "),e("li",[t._v("事件作为函数而不是字符串传递。")])]),t._v(" "),e("p",[t._v("事件参数重包含一组特定于事件的属性。每个事件类型都包含自己的属性和行为，只能通过其事件处理程序访问。")]),t._v(" "),e("h3",{attrs:{id:"_23-如何在-react-中创建一个事件？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-如何在-react-中创建一个事件？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("23. 如何在 React 中创建一个事件？")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Display extends React.Component({\n    show(evt) {\n        // code\n    },\n    render() {\n        // Render the div with an onClick prop (value is a function)\n        return (\n            <div onClick={this.show}>Click Me!</div>\n        );\n    }\n});\n")])])]),e("h3",{attrs:{id:"_24-react-中的合成事件是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-react-中的合成事件是什么？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("24. React 中的合成事件是什么？")])]),t._v(" "),e("p",[t._v("合成事件是围绕浏览器原生事件充当跨浏览器包装器的对象。它们将不同浏览器的行为合并为一个 API。这样做是为了确保事件在不同浏览器中显示一致的属性。")]),t._v(" "),e("h3",{attrs:{id:"_25-你对-react-的-refs-有什么了解？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-你对-react-的-refs-有什么了解？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("25. 你对 React 的 refs 有什么了解？")])]),t._v(" "),e("p",[t._v("Refs 是 React 中引用的简写。它是一个有助于存储对特定的 React 元素或组件的引用的属性，它将由组件渲染配置函数返回。用于对 render() 返回的特定元素或组件的引用。当需要进行 DOM 测量或向组件添加方法时，它们会派上用场。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class ReferenceDemo extends React.Component{\n     display() {\n         const name = this.inputDemo.value;\n         document.getElementById(\'disp\').innerHTML = name;\n     }\nrender() {\n    return(\n          <div>\n            Name: <input type="text" ref={input => this.inputDemo = input} />\n            <button name="Click" onClick={this.display}>Click</button>\n            <h2>Hello <span id="disp"></span> !!!</h2>\n          </div>\n    );\n   }\n }\n')])])]),e("h3",{attrs:{id:"_26-列出一些应该使用-refs-的情况。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_26-列出一些应该使用-refs-的情况。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("26. 列出一些应该使用 Refs 的情况。")])]),t._v(" "),e("p",[t._v("以下是应该使用 refs 的情况：")]),t._v(" "),e("ul",[e("li",[t._v("需要管理焦点、选择文本或媒体播放时")]),t._v(" "),e("li",[t._v("触发式动画")]),t._v(" "),e("li",[t._v("与第三方 DOM 库集成")])]),t._v(" "),e("h3",{attrs:{id:"_27-如何模块化-react-中的代码？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_27-如何模块化-react-中的代码？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("27. 如何模块化 React 中的代码？")])]),t._v(" "),e("p",[t._v("可以使用 export 和 import 属性来模块化代码。它们有助于在不同的文件中单独编写组件。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//ChildComponent.jsx\nexport default class ChildComponent extends React.Component {\n    render() {\n        return(\n              <div>\n                <h1>This is a child component</h1>\n              </div>\n        );\n    }\n}\n\n//ParentComponent.jsx\nimport ChildComponent from './childcomponent.js';\nclass ParentComponent extends React.Component {\n    render() {\n        return(\n             <div>\n                <App />\n             </div>\n        );\n    }\n}\n")])])]),e("h3",{attrs:{id:"_28-如何在-react-中创建表单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_28-如何在-react-中创建表单"}},[t._v("#")]),t._v(" "),e("strong",[t._v("28. 如何在 React 中创建表单")])]),t._v(" "),e("p",[t._v("React 表单类似于 HTML 表单。但是在 React 中，状态包含在组件的 state 属性中，并且只能通过 "),e("code",[t._v("setState()")]),t._v(" 更新。因此元素不能直接更新它们的状态，它们的提交是由 JavaScript 函数处理的。此函数可以完全访问用户输入到表单的数据。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('handleSubmit(event) {\n    alert(\'A name was submitted: \' + this.state.value);\n    event.preventDefault();\n}\n\nrender() {\n    return (\n        <form onSubmit={this.handleSubmit}>\n            <label>\n                Name:\n                <input type="text" value={this.state.value} onChange={this.handleSubmit} />\n            </label>\n            <input type="submit" value="Submit" />\n        </form>\n    );\n}\n')])])]),e("h3",{attrs:{id:"_29-你对受控组件和非受控组件了解多少？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_29-你对受控组件和非受控组件了解多少？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("29. 你对受控组件和非受控组件了解多少？")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("受控组件")])]),t._v(" "),e("th",[e("strong",[t._v("非受控组件")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("1. 没有维持自己的状态")]),t._v(" "),e("td",[t._v("1. 保持着自己的状态")])]),t._v(" "),e("tr",[e("td",[t._v("2.数据由父组件控制")]),t._v(" "),e("td",[t._v("2.数据由 DOM 控制")])]),t._v(" "),e("tr",[e("td",[t._v("3. 通过 props 获取当前值，然后通过回调通知更改")]),t._v(" "),e("td",[t._v("3. Refs 用于获取其当前值")])])])]),t._v(" "),e("h3",{attrs:{id:"_30-什么是高阶组件（hoc）？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_30-什么是高阶组件（hoc）？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("30. 什么是高阶组件（HOC）？")])]),t._v(" "),e("p",[t._v("高阶组件是重用组件逻辑的高级方法，是一种源于 React 的组件模式。 HOC 是自定义组件，在它之内包含另一个组件。它们可以接受子组件提供的任何动态，但不会修改或复制其输入组件中的任何行为。你可以认为 HOC 是“纯（Pure）”组件。")]),t._v(" "),e("h3",{attrs:{id:"_31-你能用-hoc-做什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_31-你能用-hoc-做什么？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("31. 你能用 HOC 做什么？")])]),t._v(" "),e("p",[t._v("HOC 可用于许多任务，例如：")]),t._v(" "),e("ul",[e("li",[t._v("代码重用，逻辑和引导抽象")]),t._v(" "),e("li",[t._v("渲染劫持")]),t._v(" "),e("li",[t._v("状态抽象和控制")]),t._v(" "),e("li",[t._v("Props 控制")])]),t._v(" "),e("h3",{attrs:{id:"_32-什么是纯组件？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_32-什么是纯组件？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("32. 什么是纯组件？")])]),t._v(" "),e("p",[e("em",[t._v("纯（Pure）")]),t._v(" 组件是可以编写的最简单、最快的组件。它们可以替换任何只有 "),e("strong",[t._v("render()")]),t._v(" 的组件。这些组件增强了代码的简单性和应用的性能。")]),t._v(" "),e("h3",{attrs:{id:"_33-react-中-key-的重要性是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_33-react-中-key-的重要性是什么？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("33. React 中 key 的重要性是什么？")])]),t._v(" "),e("p",[t._v("key 用于识别唯一的 Virtual DOM 元素及其驱动 UI 的相应数据。它们通过回收 DOM 中当前所有的元素来帮助 React 优化渲染。这些 key 必须是唯一的数字或字符串，React 只是重新排序元素而不是重新渲染它们。这可以提高应用程序的性能。")]),t._v(" "),e("h2",{attrs:{id:"react-redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[t._v("#")]),t._v(" "),e("strong",[t._v("React Redux")])]),t._v(" "),e("h3",{attrs:{id:"_34-mvc-框架的主要问题是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_34-mvc-框架的主要问题是什么？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("34. MVC 框架的主要问题是什么？")])]),t._v(" "),e("p",[t._v("以下是 MVC 框架的一些主要问题：")]),t._v(" "),e("ul",[e("li",[t._v("对 DOM 操作的代价非常高")]),t._v(" "),e("li",[t._v("程序运行缓慢且效率低下")]),t._v(" "),e("li",[t._v("内存浪费严重")]),t._v(" "),e("li",[t._v("由于循环依赖性，组件模型需要围绕 models 和 views 进行创建")])]),t._v(" "),e("h3",{attrs:{id:"_35-解释一下-flux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_35-解释一下-flux"}},[t._v("#")]),t._v(" "),e("strong",[t._v("35. 解释一下 Flux")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/68598-6a1bacf87238e317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/796/format/webp",alt:"img"}})]),t._v(" "),e("p",[t._v("flux")]),t._v(" "),e("p",[t._v("Flux 是一种强制单向数据流的架构模式。它控制派生数据，并使用具有所有数据权限的中心 store 实现多个组件之间的通信。整个应用中的数据更新必须只能在此处进行。 Flux 为应用提供稳定性并减少运行时的错误。")]),t._v(" "),e("h3",{attrs:{id:"_36-什么是-redux？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_36-什么是-redux？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("36. 什么是 Redux？")])]),t._v(" "),e("p",[t._v("Redux 是当今最热门的前端开发库之一。它是 JavaScript 程序的可预测状态容器，用于整个应用的状态管理。使用 Redux 开发的应用易于测试，可以在不同环境中运行，并显示一致的行为。")]),t._v(" "),e("h3",{attrs:{id:"_37-redux-遵循的三个原则是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_37-redux-遵循的三个原则是什么？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("37. Redux 遵循的三个原则是什么？")])]),t._v(" "),e("ol",[e("li",[t._v("***单一事实来源：***整个应用的状态存储在单个 store 中的对象/状态树里。单一状态树可以更容易地跟踪随时间的变化，并调试或检查应用程序。")]),t._v(" "),e("li",[t._v("***状态是只读的：***改变状态的唯一方法是去触发一个动作。动作是描述变化的普通 JS 对象。就像 state 是数据的最小表示一样，该操作是对数据更改的最小表示。")]),t._v(" "),e("li",[t._v("***使用纯函数进行更改：***为了指定状态树如何通过操作进行转换，你需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/68598-2b4c87f3ed499a1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/515/format/webp",alt:"img"}})]),t._v(" "),e("p",[t._v("Store")]),t._v(" "),e("h3",{attrs:{id:"_38-你对“单一事实来源”有什么理解？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_38-你对“单一事实来源”有什么理解？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("38. 你对“单一事实来源”有什么理解？")])]),t._v(" "),e("p",[t._v("Redux 使用 “Store” 将程序的整个状态存储在同一个地方。因此所有组件的状态都存储在 Store 中，并且它们从 Store 本身接收更新。单一状态树可以更容易地跟踪随时间的变化，并调试或检查程序。")]),t._v(" "),e("h3",{attrs:{id:"_39-列出-redux-的组件。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_39-列出-redux-的组件。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("39. 列出 Redux 的组件。")])]),t._v(" "),e("p",[t._v("Redux 由以下组件组成：")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("Action")]),t._v(" – 这是一个用来描述发生了什么事情的对象。")]),t._v(" "),e("li",[e("strong",[t._v("Reducer")]),t._v(" – 这是一个确定状态将如何变化的地方。")]),t._v(" "),e("li",[e("strong",[t._v("Store")]),t._v(" – 整个程序的状态/对象树保存在 Store 中。")]),t._v(" "),e("li",[e("strong",[t._v("View")]),t._v(" – 只显示 Store 提供的数据。")])]),t._v(" "),e("h3",{attrs:{id:"_40-数据如何通过-redux-流动？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_40-数据如何通过-redux-流动？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("40. 数据如何通过 Redux 流动？")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https:////upload-images.jianshu.io/upload_images/68598-9b042890330b4510.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp",alt:"img"}})]),t._v(" "),e("p",[t._v("Data Flow in Redux")]),t._v(" "),e("h3",{attrs:{id:"_41-如何在-redux-中定义-action？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_41-如何在-redux-中定义-action？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("41. 如何在 Redux 中定义 Action？")])]),t._v(" "),e("p",[t._v("React 中的 Action 必须具有 type 属性，该属性指示正在执行的 ACTION 的类型。必须将它们定义为字符串常量，并且还可以向其添加更多的属性。在 Redux 中，action 被名为 Action Creators 的函数所创建。以下是 Action 和 Action Creator 的示例：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function addTodo(text) {\n       return {\n                type: ADD_TODO,\n                 text\n    }\n}\n")])])]),e("h3",{attrs:{id:"_42-解释-reducer-的作用。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_42-解释-reducer-的作用。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("42. 解释 Reducer 的作用。")])]),t._v(" "),e("p",[t._v("Reducers 是纯函数，它规定应用程序的状态怎样因响应 ACTION 而改变。Reducers 通过接受先前的状态和 action 来工作，然后它返回一个新的状态。它根据操作的类型确定需要执行哪种更新，然后返回新的值。如果不需要完成任务，它会返回原来的状态。")]),t._v(" "),e("h3",{attrs:{id:"_43-store-在-redux-中的意义是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_43-store-在-redux-中的意义是什么？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("43. Store 在 Redux 中的意义是什么？")])]),t._v(" "),e("p",[t._v("Store 是一个 JavaScript 对象，它可以保存程序的状态，并提供一些方法来访问状态、调度操作和注册侦听器。应用程序的整个状态/对象树保存在单一存储中。因此，Redux 非常简单且是可预测的。我们可以将中间件传递到 store 来处理数据，并记录改变存储状态的各种操作。所有操作都通过 reducer 返回一个新状态。")]),t._v(" "),e("h3",{attrs:{id:"_44-redux-与-flux-有何不同？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_44-redux-与-flux-有何不同？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("44. Redux 与 Flux 有何不同？")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("Flux")])]),t._v(" "),e("th",[e("strong",[t._v("Redux")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("1. Store 包含状态和更改逻辑")]),t._v(" "),e("td",[t._v("1. Store 和更改逻辑是分开的")])]),t._v(" "),e("tr",[e("td",[t._v("2. 有多个 Store")]),t._v(" "),e("td",[t._v("2. 只有一个 Store")])]),t._v(" "),e("tr",[e("td",[t._v("3. 所有 Store 都互不影响且是平级的")]),t._v(" "),e("td",[t._v("3. 带有分层 reducer 的单一 Store")])]),t._v(" "),e("tr",[e("td",[t._v("4. 有单一调度器")]),t._v(" "),e("td",[t._v("4. 没有调度器的概念")])]),t._v(" "),e("tr",[e("td",[t._v("5. React 组件订阅 store")]),t._v(" "),e("td",[t._v("5. 容器组件是有联系的")])]),t._v(" "),e("tr",[e("td",[t._v("6. 状态是可变的")]),t._v(" "),e("td",[t._v("6. 状态是不可改变的")])])])]),t._v(" "),e("h3",{attrs:{id:"_45-redux-有哪些优点？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_45-redux-有哪些优点？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("45. Redux 有哪些优点？")])]),t._v(" "),e("p",[t._v("Redux 的优点如下：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("结果的可预测性 -")]),t._v(" 由于总是存在一个真实来源，即 store ，因此不存在如何将当前状态与动作和应用的其他部分同步的问题。")]),t._v(" "),e("li",[e("strong",[t._v("可维护性 -")]),t._v(" 代码变得更容易维护，具有可预测的结果和严格的结构。")]),t._v(" "),e("li",[e("strong",[t._v("服务器端渲染 -")]),t._v(" 你只需将服务器上创建的 store 传到客户端即可。这对初始渲染非常有用，并且可以优化应用性能，从而提供更好的用户体验。")]),t._v(" "),e("li",[e("strong",[t._v("开发人员工具 -")]),t._v(" 从操作到状态更改，开发人员可以实时跟踪应用中发生的所有事情。")]),t._v(" "),e("li",[e("strong",[t._v("社区和生态系统 -")]),t._v(" Redux 背后有一个巨大的社区，这使得它更加迷人。一个由才华横溢的人组成的大型社区为库的改进做出了贡献，并开发了各种应用。")]),t._v(" "),e("li",[e("strong",[t._v("易于测试 -")]),t._v(" Redux 的代码主要是小巧、纯粹和独立的功能。这使代码可测试且独立。")]),t._v(" "),e("li",[e("strong",[t._v("组织 -")]),t._v(" Redux 准确地说明了代码的组织方式，这使得代码在团队使用时更加一致和简单。")])]),t._v(" "),e("h2",{attrs:{id:"react-路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-路由"}},[t._v("#")]),t._v(" "),e("strong",[t._v("React 路由")])]),t._v(" "),e("h3",{attrs:{id:"_46-什么是-react-路由？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_46-什么是-react-路由？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("46. 什么是 React 路由？")])]),t._v(" "),e("p",[t._v("React 路由是一个构建在 React 之上的强大的路由库，它有助于向应用程序添加新的屏幕和流。这使 URL 与网页上显示的数据保持同步。它负责维护标准化的结构和行为，并用于开发单页 Web 应用。 React 路由有一个简单的 API。")]),t._v(" "),e("h3",{attrs:{id:"_47-为什么-react-router-v4-中使用-switch-关键字-？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_47-为什么-react-router-v4-中使用-switch-关键字-？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("47. 为什么 React Router v4 中使用 switch 关键字 ？")])]),t._v(" "),e("p",[t._v("虽然 **"),e("code",[t._v("\\*\\* 用于封装 Router 中的多个路由，当你想要仅显示要在多个定义的路线中呈现的单个路线时，可以使用 “switch” 关键字。使用时，**")]),t._v("** 标记会按顺序将已定义的 URL 与已定义的路由进行匹配。找到第一个匹配项后，它将渲染指定的路径。从而绕过其它路线。")]),t._v(" "),e("h3",{attrs:{id:"_48-为什么需要-react-中的路由？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_48-为什么需要-react-中的路由？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("48. 为什么需要 React 中的路由？")])]),t._v(" "),e("p",[t._v("Router 用于定义多个路由，当用户定义特定的 URL 时，如果此 URL 与 Router 内定义的任何 “路由” 的路径匹配，则用户将重定向到该特定路由。所以基本上我们需要在自己的应用中添加一个 Router 库，允许创建多个路由，每个路由都会向我们提供一个独特的视图")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<switch>\n    <route exact path=’/’ component={Home}/>\n    <route path=’/posts/:id’ component={Newpost}/>\n    <route path=’/posts’   component={Post}/>\n</switch>\n")])])]),e("h3",{attrs:{id:"_49-列出-react-router-的优点。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_49-列出-react-router-的优点。"}},[t._v("#")]),t._v(" "),e("strong",[t._v("49. 列出 React Router 的优点。")])]),t._v(" "),e("p",[t._v("几个优点是：")]),t._v(" "),e("ol",[e("li",[t._v("就像 React 基于组件一样，在 React Router v4 中，API 是 "),e("em",[t._v("'All About Components'")]),t._v("。可以将 Router 可视化为单个根组件（"),e("strong",[e("code",[t._v("**），其中我们将特定的子路由（**")])]),t._v("）包起来。")]),t._v(" "),e("li",[t._v("无需手动设置历史值：在 React Router v4 中，我们要做的就是将路由包装在 "),e("strong",[t._v("``")]),t._v(" 组件中。")]),t._v(" "),e("li",[t._v("包是分开的：共有三个包，分别用于 Web、Native 和 Core。这使我们应用更加紧凑。基于类似的编码风格很容易进行切换。")])]),t._v(" "),e("h3",{attrs:{id:"_50-react-router-与常规路由有何不同？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_50-react-router-与常规路由有何不同？"}},[t._v("#")]),t._v(" "),e("strong",[t._v("50. React Router 与常规路由有何不同？")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("strong",[t._v("主题")])]),t._v(" "),e("th",[e("strong",[t._v("常规路由")])]),t._v(" "),e("th",[e("strong",[t._v("React 路由")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("strong",[t._v("参与的页面")])]),t._v(" "),e("td",[t._v("每个视图对应一个新文件")]),t._v(" "),e("td",[t._v("只涉及单个 HTML 页面")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("URL 更改")])]),t._v(" "),e("td",[t._v("HTTP 请求被发送到服务器并且接收相应的 HTML 页面")]),t._v(" "),e("td",[t._v("仅更改历史记录属性")])]),t._v(" "),e("tr",[e("td",[e("strong",[t._v("体验")])]),t._v(" "),e("td",[t._v("用户实际在每个视图的不同页面切换")]),t._v(" "),e("td",[t._v("用户认为自己正在不同的页面间切换")])])])]),t._v(" "),e("p",[t._v("希望这套 React 面试题和答案能帮你准备面试。祝一切顺利！")]),t._v(" "),e("p",[t._v("作者：疯狂的技术宅\n链接：https://www.jianshu.com/p/9ce5b647313f\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])])}],!1,null,null,null);a.default=_.exports}}]);